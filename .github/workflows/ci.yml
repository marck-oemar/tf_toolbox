name: Docker Image CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # testinfra:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: build and testinfra
  #       env:
  #         TESTINFRA_IMAGE: "renatomefi/docker-testinfra:2"
  #         DOCKER_SOCKET_RO_BIND: "/var/run/docker.sock:/var/run/docker.sock:ro"
  #         TEST_IMAGE_NAME: "tf_toolbox"

  #       run: |
  #         docker build . --file Dockerfile --tag ${TEST_IMAGE_NAME}    
  #         # docker save and load if between jobs
          
  #         echo "starting container to be tested"
  #         export TEST_CONTAINER_ID=$(docker run --rm -it -d --entrypoint /bin/sh --name ${TEST_IMAGE_NAME}_testinfra ${TEST_IMAGE_NAME})
  #         echo "test container id: ${TEST_CONTAINER_ID}"

  #         echo "starting TestInfra tests"
  #         docker run --rm -t -v "$(pwd)/tests:/tests" \
  #           -v ${DOCKER_SOCKET_RO_BIND} \
  #           ${TESTINFRA_IMAGE} -v --hosts="docker://${TEST_CONTAINER_ID}"
            
  #         # dont forget to tag later

  semverrelease:
    #needs: testinfra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          extra_plugins: |
            @semantic-release/changelog@
            @semantic-release/git

      # - name: Do something when a new release published
      #   if: steps.semantic.outputs.new_release_published == 'true'
      #   run: |
      #     echo ${{ steps.semantic.outputs.new_release_version }}
      #     echo ${{ steps.semantic.outputs.new_release_major_version }}
      #     echo ${{ steps.semantic.outputs.new_release_minor_version }}
      #     echo ${{ steps.semantic.outputs.new_release_patch_version }}

      - name: build_and_push
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}

      - name: Set up Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      -     
        name: Cache Docker layers
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        uses: docker/login-action@v1 
        if: steps.semantic.outputs.new_release_published == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        if: steps.semantic.outputs.new_release_published == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./ 
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: elmoenco/tf_toolbox:${{ steps.semantic.outputs.new_release_version }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Image digest
        if: steps.semantic.outputs.new_release_published == 'true'
        run: echo ${{ steps.docker_build.outputs.digest }}

